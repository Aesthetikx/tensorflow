# Generated by `rake generate_ops`
module TensorFlow
  module GeneratedOps
    def abs(x)
      execute("Abs", [x])
    end

    def acos(x)
      execute("Acos", [x])
    end

    def acosh(x)
      execute("Acosh", [x])
    end

    def add(x, y)
      execute("Add", [x, y])
    end

    def approximate_equal(x, y)
      execute("ApproximateEqual", [x, y])
    end

    def asin(x)
      execute("Asin", [x])
    end

    def asinh(x)
      execute("Asinh", [x])
    end

    def atan(x)
      execute("Atan", [x])
    end

    def atanh(x)
      execute("Atanh", [x])
    end

    def batch_mat_mul(x, y)
      execute("BatchMatMul", [x, y])
    end

    def bessel_i0e(x)
      execute("BesselI0e", [x])
    end

    def bessel_i1e(x)
      execute("BesselI1e", [x])
    end

    def bitwise_and(x, y)
      execute("BitwiseAnd", [x, y])
    end

    def bitwise_or(x, y)
      execute("BitwiseOr", [x, y])
    end

    def bitwise_xor(x, y)
      execute("BitwiseXor", [x, y])
    end

    def cast(x)
      execute("Cast", [x])
    end

    def ceil(x)
      execute("Ceil", [x])
    end

    def complex_abs(x)
      execute("ComplexAbs", [x])
    end

    def conjugate_transpose(x, perm)
      execute("ConjugateTranspose", [x, perm])
    end

    def cos(x)
      execute("Cos", [x])
    end

    def cosh(x)
      execute("Cosh", [x])
    end

    def cumprod(x, axis)
      execute("Cumprod", [x, axis])
    end

    def cumsum(x, axis)
      execute("Cumsum", [x, axis])
    end

    def data_format_dim_map(x)
      execute("DataFormatDimMap", [x])
    end

    def data_format_vec_permute(x)
      execute("DataFormatVecPermute", [x])
    end

    def deep_copy(x)
      execute("DeepCopy", [x])
    end

    def digamma(x)
      execute("Digamma", [x])
    end

    def divide(x, y)
      execute("Div", [x, y])
    end

    def div_no_nan(x, y)
      execute("DivNoNan", [x, y])
    end

    def equal(x, y)
      execute("Equal", [x, y])
    end

    def erf(x)
      execute("Erf", [x])
    end

    def erfc(x)
      execute("Erfc", [x])
    end

    def exp(x)
      execute("Exp", [x])
    end

    def expm1(x)
      execute("Expm1", [x])
    end

    def fill(dims, value)
      execute("Fill", [dims, value])
    end

    def floor(x)
      execute("Floor", [x])
    end

    def floordiv(x, y)
      execute("FloorDiv", [x, y])
    end

    def floormod(x, y)
      execute("FloorMod", [x, y])
    end

    def fused_batch_norm(x, scale, offset, mean, variance)
      execute("FusedBatchNorm", [x, scale, offset, mean, variance])
    end

    def fused_batch_norm_v3(x, scale, offset, mean, variance)
      execute("FusedBatchNormV3", [x, scale, offset, mean, variance])
    end

    def greater(x, y)
      execute("Greater", [x, y])
    end

    def greater_equal(x, y)
      execute("GreaterEqual", [x, y])
    end

    def inplace_add(x, i, v)
      execute("InplaceAdd", [x, i, v])
    end

    def inplace_sub(x, i, v)
      execute("InplaceSub", [x, i, v])
    end

    def inplace_update(x, i, v)
      execute("InplaceUpdate", [x, i, v])
    end

    def inv(x)
      execute("Inv", [x])
    end

    def invert(x)
      execute("Invert", [x])
    end

    def invert_permutation(x)
      execute("InvertPermutation", [x])
    end

    def is_finite(x)
      execute("IsFinite", [x])
    end

    def is_inf(x)
      execute("IsInf", [x])
    end

    def is_nan(x)
      execute("IsNan", [x])
    end

    def left_shift(x, y)
      execute("LeftShift", [x, y])
    end

    def less(x, y)
      execute("Less", [x, y])
    end

    def less_equal(x, y)
      execute("LessEqual", [x, y])
    end

    def lgamma(x)
      execute("Lgamma", [x])
    end

    def list_diff(x, y)
      execute("ListDiff", [x, y])
    end

    def log(x)
      execute("Log", [x])
    end

    def log1p(x)
      execute("Log1p", [x])
    end

    def logical_and(x, y)
      execute("LogicalAnd", [x, y])
    end

    def logical_not(x)
      execute("LogicalNot", [x])
    end

    def logical_or(x, y)
      execute("LogicalOr", [x, y])
    end

    def maximum(x, y)
      execute("Maximum", [x, y])
    end

    def minimum(x, y)
      execute("Minimum", [x, y])
    end

    def mod(x, y)
      execute("Mod", [x, y])
    end

    def multiply(x, y)
      execute("Mul", [x, y])
    end

    def mul_no_nan(x, y)
      execute("MulNoNan", [x, y])
    end

    def neg(x)
      execute("Neg", [x])
    end

    def not_equal(x, y)
      execute("NotEqual", [x, y])
    end

    def ones_like(x)
      execute("OnesLike", [x])
    end

    def population_count(x)
      execute("PopulationCount", [x])
    end

    def pow(x, y)
      execute("Pow", [x, y])
    end

    def quantized_add(x, y, min_x, max_x, min_y, max_y)
      execute("QuantizedAdd", [x, y, min_x, max_x, min_y, max_y])
    end

    def quantized_instance_norm(x, x_min, x_max)
      execute("QuantizedInstanceNorm", [x, x_min, x_max])
    end

    def quantized_mul(x, y, min_x, max_x, min_y, max_y)
      execute("QuantizedMul", [x, y, min_x, max_x, min_y, max_y])
    end

    def range(start, limit, delta)
      execute("Range", [start, limit, delta])
    end

    def real_div(x, y)
      execute("RealDiv", [x, y])
    end

    def reciprocal(x)
      execute("Reciprocal", [x])
    end

    def right_shift(x, y)
      execute("RightShift", [x, y])
    end

    def rint(x)
      execute("Rint", [x])
    end

    def round(x)
      execute("Round", [x])
    end

    def rsqrt(x)
      execute("Rsqrt", [x])
    end

    def sigmoid(x)
      execute("Sigmoid", [x])
    end

    def sign(x)
      execute("Sign", [x])
    end

    def sin(x)
      execute("Sin", [x])
    end

    def sinh(x)
      execute("Sinh", [x])
    end

    def sqrt(x)
      execute("Sqrt", [x])
    end

    def square(x)
      execute("Square", [x])
    end

    def squared_difference(x, y)
      execute("SquaredDifference", [x, y])
    end

    def subtract(x, y)
      execute("Sub", [x, y])
    end

    def tan(x)
      execute("Tan", [x])
    end

    def tanh(x)
      execute("Tanh", [x])
    end

    def transpose(x, perm)
      execute("Transpose", [x, perm])
    end

    def truncate_div(x, y)
      execute("TruncateDiv", [x, y])
    end

    def truncate_mod(x, y)
      execute("TruncateMod", [x, y])
    end

    def unique(x)
      execute("Unique", [x])
    end

    def unique_with_counts(x)
      execute("UniqueWithCounts", [x])
    end

    def xdivy(x, y)
      execute("Xdivy", [x, y])
    end

    def xlogy(x, y)
      execute("Xlogy", [x, y])
    end

    def zeros_like(x)
      execute("ZerosLike", [x])
    end

    def zeta(x, q)
      execute("Zeta", [x, q])
    end
  end
end
